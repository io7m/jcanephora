<s:section
  xml:id="core_interfaces.array_buffers"
  xmlns:s="http://schemas.io7m.com/structural/2.1.0">
  <s:section-title>JCGLArrayBuffersType</s:section-title>
  <s:section-contents/>

  <s:subsection>
    <s:subsection-title>Description</s:subsection-title>
    <s:paragraph>
      The <s:link-external s:target="apidocs/com/io7m/jcanephora/core/api/JCGLArrayBuffersType.html">JCGLArrayBuffersType</s:link-external>
      interface provides functions for allocating, updating,
      and using array buffers. It provides a typed interface
      to the <s:term s:type="function">glGenBuffers</s:term> and
      <s:term s:type="function">glBufferData</s:term> functions.
    </s:paragraph>
    <s:paragraph>
      Array buffers are the basic storage type for vertex data used during rendering.
      The <s:term s:type="package">jcanephora</s:term> API uses the same
      model as the OpenGL 3.3 API: Buffers must be
      <s:term s:type="term">bound</s:term> before use, and at most
      one buffer of each type can be bound at any one time. The API
      currently exposes the following buffer types:
    </s:paragraph>
    <s:formal-item s:kind="listings">
      <s:formal-item-title>Buffer Types</s:formal-item-title>
      <s:list-unordered>
        <s:list-item><s:link-external s:target="apidocs/com/io7m/jcanephora/core/api/JCGLArrayBuffersType.html">Array buffers</s:link-external></s:list-item>
        <s:list-item><s:link s:target="core_interfaces.index_buffers">Index buffers</s:link></s:list-item>
      </s:list-unordered>
    </s:formal-item>
  </s:subsection>

  <s:subsection>
    <s:subsection-title>Usage examples</s:subsection-title>
    <s:paragraph>
      To allocate a 128 byte array buffer, indicating to OpenGL
      that the contents of the buffer will be specified once and then
      used repeatedly for rendering:
    </s:paragraph>
    <s:formal-item s:kind="examples">
      <s:formal-item-title>Allocation</s:formal-item-title>
      <s:verbatim><![CDATA[
JCGLArrayBuffersType g;

JCGLArrayBufferType a = g.arrayBufferAllocate(128, JCGLUsageHint.USAGE_STATIC_DRAW);
]]></s:verbatim>
    </s:formal-item>
    <s:paragraph>
      The buffer will remain bound after allocation. To update the
      contents of the buffer, an instance of
      <s:link-external s:target="apidocs/com/io7m/jcanephora/core/JCGLBufferUpdateType.html">JCGLBufferUpdateType</s:link-external>
      must be created:
    </s:paragraph>
    <s:formal-item s:kind="examples">
      <s:formal-item-title>Updates</s:formal-item-title>
      <s:verbatim><![CDATA[
JCGLArrayBuffersType g;
JCGLArrayBufferType a;

final JCGLBufferUpdateType<JCGLArrayBufferType> u =
  JCGLBufferUpdates.newUpdateReplacingAll(this.array_buffer);
final ByteBuffer b = u.getData();

for (int index = 0; index < 128; ++index) {
  b.put(index, (byte) index);
}

g.arrayBufferUpdate(u);
g.arrayBufferUnbind();
]]></s:verbatim>
    </s:formal-item>
  </s:subsection>

  <s:subsection>
    <s:subsection-title>State</s:subsection-title>
    <s:paragraph>
      OpenGL specifies that at most one array buffer can be
      <s:term s:type="term">bound</s:term> on a context at any given time.
      Many API functions operate on the currently bound buffer and the
      <s:term s:type="package">jcanephora</s:term> API avoids changing
      the current binding behind the programmer's back.
    </s:paragraph>
  </s:subsection>

</s:section>
