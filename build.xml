<project name="io7m-jcanephora" basedir="." default="main">

  <property name="dir_source"      value="src"/>
  <property name="dir_build"       value="build"/>
  <property name="dir_ext"         value="ext"/>
  <property name="dir_javadoc"     value="javadoc"/>
  <property name="dir_xmldoc"      value="doc-out"/>
  <property name="dir_test_output" value="test-out"/>
  <property name="dir_test_report" value="test-report"/>
  <property name="dir_tmp"         value="${basedir}/tmp"/>

  <property name="lwjgl_version" value="lwjgl-2.8.3"/>
  <property name="lwjgl_jar"     value="${lwjgl_version}/jar/lwjgl.jar"/>

  <property name="jogl_version"     value="jogamp-all-platforms"/>
  <property name="jogl_jar"         value="${jogl_version}/jar/jogl.all.jar"/>
  <property name="jogl_gluegen_jar" value="${jogl_version}/jar/gluegen-rt.jar"/>

  <property name="project_name"       value="io7m-jcanephora"/>
  <property name="project_version"    value="1.0.0"/>
  <property name="project_jar"        value="${project_name}-${project_version}.jar"/>
  <property name="project_source_jar" value="${project_name}-source-${project_version}.jar"/>

  <path id="classpath">
    <fileset dir="${dir_ext}" includes="*.jar"/>
    <fileset dir="${dir_ext}" includes="${lwjgl_jar}"/>
    <fileset dir="${dir_ext}" includes="${jogl_jar}"/>
    <fileset dir="${dir_ext}" includes="${jogl_gluegen_jar}"/>
  </path>

  <property name="exclude_jogl" value="**/*JOGL30*.java, **/examples/jogl30/*"/>
  <property name="exclude_lwjgl" value="**/*LWJGL30*.java, **/examples/lwjgl30/*"/>

  <!--                                           -->
  <!-- Detect whether or not LWJGL is available. -->
  <!--                                           -->

  <!-- Determine if LWJGL can actually work on this platform -->
  <target name="dependencies.lwjgl.check_platform"
    if="dependencies.lwjgl.exists"
    depends="dependencies.lwjgl.check_exists">

    <!-- LWJGL only works on the four included platforms, unfortunately. -->
    <condition property="dependencies.lwjgl.os_name" value="windows">
      <os family="windows"/>
    </condition>
    <condition property="dependencies.lwjgl.os_name" value="solaris">
      <os family="unix" name="SunOS"/>
    </condition>
    <condition property="dependencies.lwjgl.os_name" value="linux">
      <os family="unix" name="Linux"/>
    </condition>
    <condition property="dependencies.lwjgl.os_name" value="macosx">
      <os family="mac"/>
    </condition>

    <!-- Set dependencies.lwjgl.natives and dependencies.lwjgl.available if LWJGL is usable -->
    <condition property="dependencies.lwjgl.natives"
      value="${dir_ext}/${lwjgl_version}/native/${dependencies.lwjgl.os_name}">
      <isset property="dependencies.lwjgl.os_name"/>
    </condition>
    <condition property="dependencies.lwjgl.available">
      <isset property="dependencies.lwjgl.os_name"/>
    </condition>
  </target>

  <!-- LWJGL directory exists? -->
  <target name="dependencies.lwjgl.check_exists">
    <available
      property="dependencies.lwjgl.exists"
      file="${dir_ext}/${lwjgl_version}"
      type="dir"/>
  </target>

  <target name="dependencies.lwjgl" depends="dependencies.lwjgl.check_platform">
    <echo level="info" message="Checking for ${lwjgl_version}"/>
  </target>

  <!--                                          -->
  <!-- Detect whether or not JOGL is available. -->
  <!--                                          -->

  <!-- JOGL directory exists? -->
  <target name="dependencies.jogl.check_exists">
    <available
      property="dependencies.jogl.available"
      file="${dir_ext}/${jogl_jar}"
      type="file"/>
  </target>

  <target name="dependencies.jogl" depends="dependencies.jogl.check_exists">
    <echo level="info" message="Checking for ${jogl_version}"/>
  </target>

  <!--                   -->
  <!-- Produce jar file. -->
  <!--                   -->

  <target name="jar" depends="compile">
    <delete file="${project_jar}"/>
    <delete file="${project_source_jar}"/>

    <jar destfile="${project_jar}" basedir="build">
      <manifest>
        <attribute name="Specification-Title"    value="${project_name}"/>
        <attribute name="Specification-Version"  value="${project_version}"/>
        <attribute name="Specification-Vendor"   value="io7m.com"/>
        <attribute name="Implementation-Title"   value="com.io7m.jcanephora"/>
        <attribute name="Implementation-Version" value="${project_version}"/>
        <attribute name="Implementation-Vendor"  value="io7m.com"/>
        <section name="com/io7m/jcanephora">
          <attribute name="Sealed" value="true"/>
        </section>
      </manifest>
    </jar>
    <jar destfile="${project_source_jar}" basedir="src"/>
  </target>

  <!--                      -->
  <!-- Compile java source. -->
  <!--                      -->

  <target name="compile.build">
    <mkdir dir="${dir_build}"/>
  </target>

  <target name="compile.lwjgl" if="dependencies.lwjgl.available" depends="compile.build, dependencies">
    <echo level="info" message="Compiling LWJGL source"/>
    <javac
      srcdir="${dir_source}"
      excludes="${exclude_jogl}"
      destdir="${dir_build}"
      includeantruntime="false"
      classpathref="classpath"/>
  </target>

  <target name="compile.jogl" if="dependencies.jogl.available" depends="compile.build, dependencies">
    <echo level="info" message="Compiling JOGL source"/>
    <javac
      srcdir="${dir_source}"
      excludes="${exclude_lwjgl}"
      destdir="${dir_build}"
      includeantruntime="false"
      classpathref="classpath"/>
  </target>

  <target name="compile" depends="compile.lwjgl, compile.jogl"/>

  <!--                  -->
  <!-- Produce javadoc. -->
  <!--                  -->

  <target name="documentation.dir">
    <mkdir dir="${dir_javadoc}"/>
  </target>

  <target name="documentation.all"
    depends="dependencies, documentation.dir"
    if="dependencies.jogl.available, dependencies.lwjgl.available">
    <javadoc sourcepath="${dir_source}" destdir="${dir_javadoc}" classpathref="classpath"/>
  </target>

  <target name="documentation.lwjgl"
    depends="dependencies, documentation.dir"
    if="dependencies.lwjgl.available"
    unless="dependencies.jogl.available">
    <javadoc destdir="${dir_javadoc}" classpathref="classpath">
      <fileset dir="${dir_source}" excludes="${exclude_jogl}"/>
    </javadoc>
  </target>

  <target name="documentation.jogl"
    depends="dependencies, documentation.dir"
    if="dependencies.jogl.available"
    unless="dependencies.lwjgl.available">
    <javadoc destdir="${dir_javadoc}" classpathref="classpath">
      <fileset dir="${dir_source}" excludes="${exclude_lwjgl}"/>
    </javadoc>
  </target>

  <target name="documentation" depends="documentation.all, documentation.lwjgl, documentation.jogl"/>

  <!--                          -->
  <!-- Clean build environment. -->
  <!--                          -->

  <target name="clean">
    <delete dir="${dir_build}"/>
    <delete dir="${dir_javadoc}"/>
    <delete dir="${dir_xmldoc}"/>
    <delete dir="${dir_test_output}"/>
    <delete dir="${dir_test_report}"/>
    <delete dir="${dir_tmp}"/>
    <delete file="${project_jar}"/>
    <delete file="${project_source_jar}"/>
  </target>

  <!--                 -->
  <!-- Run unit tests. -->
  <!--                 -->

  <target name="tests.output">
    <mkdir dir="${dir_test_output}"/>
    <mkdir dir="${dir_test_report}"/>
    <mkdir dir="${dir_tmp}"/>
  </target>

  <target name="tests.lwjgl" depends="tests.output, jar, dependencies" if="dependencies.lwjgl.available">
    <junit printsummary="yes" fork="yes" haltonfailure="yes">
      <formatter type="plain" />
      <formatter type="xml" />
      <classpath>
        <path refid="classpath"/>
        <pathelement location="${project_jar}"/>
      </classpath>
      <jvmarg value="-Djava.library.path=${dependencies.lwjgl.natives}"/>
      <batchtest fork="yes" todir="${dir_test_output}">
        <fileset dir="${dir_source}"
          includes="**/*Test.java"
          excludes="${exclude_jogl}"/>
      </batchtest>
    </junit>
  </target>

  <target name="tests.jogl" depends="tests.output, jar, dependencies" if="dependencies.jogl.available">
    <junit printsummary="yes" fork="yes" haltonfailure="yes">
      <formatter type="plain" />
      <formatter type="xml" />
      <classpath>
        <path refid="classpath"/>
        <pathelement location="${project_jar}"/>
      </classpath>
      <!-- Hack to workaround noexec /tmp; use ${dir_tmp} for native libraries. -->
      <jvmarg value="-Djava.io.tmpdir=${dir_tmp}"/>
      <batchtest fork="yes" todir="${dir_test_output}">
        <fileset dir="${dir_source}"
          includes="**/*Test.java"
          excludes="${exclude_lwjgl}"/>
      </batchtest>
    </junit>
  </target>

  <target name="tests.report" depends="tests.lwjgl, tests.jogl">
    <junitreport todir="${dir_test_report}">
      <fileset dir="${dir_test_output}"/>
      <report todir="${dir_test_report}"/>
    </junitreport>
  </target>

  <target name="tests" depends="tests.lwjgl, tests.jogl, tests.report"/>

  <!--                      -->
  <!-- Display system info. -->
  <!--                      -->

  <target name="system">
    <echo level="info" message="OS              ${os.name}"/>
    <echo level="info" message="OS-Version      ${os.version}"/>
    <echo level="info" message="OS-Arch         ${os.arch}"/>
    <echo level="info" message="Java-Vendor     ${java.vendor}"/>
    <echo level="info" message="Java-Version    ${java.version}"/>
    <echo level="info" message="Java-VM         ${java.vm.name}"/>
    <echo level="info" message="Java-VM-Version ${java.vm.version}"/>
  </target>

  <!--                                         -->
  <!-- Determine the existence of dependencies -->
  <!--                                         -->

  <target name="dependencies" depends="dependencies.lwjgl, dependencies.jogl">
    <fail message="Neither ${lwjgl_version} or ${jogl_version} are available in ${dir_ext}">
      <condition>
        <not>
          <or>
            <isset property="dependencies.lwjgl.available"/>
            <isset property="dependencies.jogl.available"/>
          </or>
        </not>
      </condition>
    </fail>
  </target>

  <!--             -->
  <!-- Main target -->
  <!--             -->

  <target name="main" depends="system, dependencies, clean, compile, jar, tests, documentation"/>

</project>
