<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>com.io7m.jcanephora 0.61.0 Documentation: 1.1. Orientation</title><link rel="stylesheet" type="text/css" href="jstructural-2.0.0-layout.css"/><link rel="stylesheet" type="text/css" href="jstructural-2.0.0-colour.css"/><link rel="stylesheet" type="text/css" href="documentation.css"/></head><body><div class="st200_body"><div class="brand">
  <div class="brand_left">
    <a href="http://io7m.com/">io7m</a>
  </div>
  <div class="brand_right">
    <a href="http://github.com/io7m/jcanephora">com.io7m.jcanephora</a> 0.61.0
  </div>
</div><div class="st200_navbar st200_navbar_top"><table class="st200_navbar_table" summary="Navigation bar"><tr><td class="st200_navbar_prev_title_cell">1. Package Information</td><td class="st200_navbar_up_title_cell">1. Package Information</td><td class="st200_navbar_next_title_cell">1.2. Requirements</td></tr><tr><td class="st200_navbar_prev_file_cell"><a href="p1.xhtml#st200_p1">Previous</a></td><td class="st200_navbar_up_file_cell"><a href="p1.xhtml#st200_p1">Up</a></td><td class="st200_navbar_next_file_cell"><a href="p1s2.xhtml#st200_p1s2">Next</a></td></tr></table><hr class="st200_hr"/></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p1s1" href="#st200_p1s1">1.1</a></div><div class="st200_section_title">Orientation</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p1s1ss1" href="#st200_p1s1ss1">1.1.1</a></div><div class="st200_subsection_title">Overview</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s1ss1pg1" href="#st200_p1s1ss1pg1">1</a></div><div class="st200_paragraph">
        The <span class="st200_term package">jcanephora</span>
        package implements a set of abstractions over
        <a class="st200_link_external" href="http://opengl.org">OpenGL</a>
        with the intention of providing an API that enforces program
        correctness statically. The OpenGL API is extremely error prone, but
        thankfully many of the problems can be alleviated with the simple
        application of static types. Where the Java type system is too weak
        to give static guarantees, dynamic checks are used to prevent silent
        failure.
      </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p1s1ss2" href="#st200_p1s1ss2">1.1.2</a></div><div class="st200_subsection_title">Correctness</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s1ss2pg1" href="#st200_p1s1ss2pg1">1</a></div><div class="st200_paragraph">
        Most functions in OpenGL return integers (type <span class="st200_term type">int</span>).
        The <span class="st200_term function">glCreateShader()</span> function, for example,
        returns an <span class="st200_term type">int</span> regardless of whether the function
        is creating a fragment shader or a vertex shader. Obviously, returning a different
        type depending on whether a fragment shader or a vertex shader was requested
        would require a dependent type system. As Java clearly does not have dependent types, the
        <span class="st200_term package">jcanephora</span> package
        provides a <span class="st200_term function">shaderCompileVertex()</span> function that
        returns a value of type <span class="st200_term type">JCGLVertexShaderType</span> and a
        <span class="st200_term function">shaderCompileFragment()</span> function that returns
        a value of type <span class="st200_term type">JCGLFragmentShaderType</span>, eliminating
        at compile-time the possibility of confusing the two. The package takes a similar
        approach to static safety throughout.
      </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s1ss2pg2" href="#st200_p1s1ss2pg2">2</a></div><div class="st200_paragraph">
        All implementations of the <span class="st200_term package">jcanephora</span> API are
        run through a large battery of tests to ensure consistent semantics.
      </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p1s1ss3" href="#st200_p1s1ss3">1.1.3</a></div><div class="st200_subsection_title">Simplicity</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s1ss3pg1" href="#st200_p1s1ss3pg1">1</a></div><div class="st200_paragraph">
        The <span class="st200_term package">jcanephora</span> package attempts to
        provide abstractions that are as minimal as possible. It should be
        possible for any experienced OpenGL programmer to use the package
        without having to learn new concepts or fight a complicated class
        hierarchy. The idea is to provide static type safety in as simple
        a manner as possible.
      </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p1s1ss4" href="#st200_p1s1ss4">1.1.4</a></div><div class="st200_subsection_title">Compatibility</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s1ss4pg1" href="#st200_p1s1ss4pg1">1</a></div><div class="st200_paragraph">
        The <span class="st200_term package">jcanephora</span> exposes interfaces
        that represent the OpenGL 3.3 core API.
      </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p1s1ss5" href="#st200_p1s1ss5">1.1.5</a></div><div class="st200_subsection_title">Performance</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s1ss5pg1" href="#st200_p1s1ss5pg1">1</a></div><div class="st200_paragraph">
        OpenGL programs often have high performance requirements.
        The <span class="st200_term package">jcanephora</span> API abstractions
        attempt to be as cheap as possible. Operations that allocate memory or perform
        potentially expensive operations are clearly marked. Emphasis is placed on
        writing code paths that generate little in the way of garbage to be collected,
        reducing GC pressure and improving realtime performance. Many potentially expensive
        queries (such as a request for the available number of texture units) are requested eagerly and
        cached, in order to reduce the number of OpenGL calls required at "render time".
        The package tracks OpenGL state locally to avoid redundant OpenGL
        calls.
      </div></div></div></div><div class="st200_navbar st200_navbar_bottom"><hr class="st200_hr"/><table class="st200_navbar_table" summary="Navigation bar"><tr><td class="st200_navbar_prev_file_cell"><a href="p1.xhtml#st200_p1">Previous</a></td><td class="st200_navbar_up_file_cell"><a href="p1.xhtml#st200_p1">Up</a></td><td class="st200_navbar_next_file_cell"><a href="p1s2.xhtml#st200_p1s2">Next</a></td></tr><tr><td class="st200_navbar_prev_title_cell">1. Package Information</td><td class="st200_navbar_up_title_cell">1. Package Information</td><td class="st200_navbar_next_title_cell">1.2. Requirements</td></tr></table></div></div></body></html>
