<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright © 2015 <code@io7m.com> http://io7m.com

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  -->

<s:part xmlns:s="http://schemas.io7m.com/structural/2.1.0">
  <s:part-title>Package Information</s:part-title>
  <s:part-contents/>
  <s:section>
    <s:section-title>Orientation</s:section-title>
    <s:subsection>
      <s:subsection-title>Overview</s:subsection-title>
      <s:paragraph>
        The <s:term s:type="package">jcanephora</s:term>
        package implements a set of abstractions over
        <s:link-external s:target="http://opengl.org">OpenGL</s:link-external>
        with the intention of providing an API that enforces program
        correctness statically. The OpenGL API is extremely error prone, but
        thankfully many of the problems can be alleviated with the simple
        application of static types. Where the Java type system is too weak
        to give static guarantees, dynamic checks are used to prevent silent
        failure.
      </s:paragraph>
    </s:subsection>
    <s:subsection>
      <s:subsection-title>Correctness</s:subsection-title>
      <s:paragraph>
        Most functions in OpenGL return integers (type <s:term s:type="type">int</s:term>).
        The <s:term s:type="function">glCreateShader()</s:term> function, for example,
        returns an <s:term s:type="type">int</s:term> regardless of whether the function
        is creating a fragment shader or a vertex shader. Obviously, returning a different
        type depending on whether a fragment shader or a vertex shader was requested
        would require a dependent type system. As Java clearly does not have dependent types, the
        <s:term s:type="package">jcanephora</s:term> package
        provides a <s:term s:type="function">shaderCompileVertex()</s:term> function that
        returns a value of type <s:term s:type="type">JCGLVertexShaderType</s:term> and a
        <s:term s:type="function">shaderCompileFragment()</s:term> function that returns
        a value of type <s:term s:type="type">JCGLFragmentShaderType</s:term>, eliminating
        at compile-time the possibility of confusing the two. The package takes a similar
        approach to static safety throughout.
      </s:paragraph>
      <s:paragraph>
        All implementations of the <s:term s:type="package">jcanephora</s:term> API are
        run through a large battery of tests to ensure consistent semantics.
      </s:paragraph>
    </s:subsection>
    <s:subsection>
      <s:subsection-title>Simplicity</s:subsection-title>
      <s:paragraph>
        The <s:term s:type="package">jcanephora</s:term> package attempts to
        provide abstractions that are as minimal as possible. It should be
        possible for any experienced OpenGL programmer to use the package
        without having to learn new concepts or fight a complicated class
        hierarchy. The idea is to provide static type safety in as simple
        a manner as possible.
      </s:paragraph>
    </s:subsection>
    <s:subsection>
      <s:subsection-title>Compatibility</s:subsection-title>
      <s:paragraph>
        The <s:term s:type="package">jcanephora</s:term> exposes interfaces
        that represent the OpenGL 3.3 core API.
      </s:paragraph>
    </s:subsection>
    <s:subsection>
      <s:subsection-title>Performance</s:subsection-title>
      <s:paragraph>
        OpenGL programs often have high performance requirements.
        The <s:term s:type="package">jcanephora</s:term> API abstractions
        attempt to be as cheap as possible. Operations that allocate memory or perform
        potentially expensive operations are clearly marked. Emphasis is placed on
        writing code paths that generate little in the way of garbage to be collected,
        reducing GC pressure and improving realtime performance. Many potentially expensive
        queries (such as a request for the available number of texture units) are requested eagerly and
        cached, in order to reduce the number of OpenGL calls required at "render time".
        The package tracks OpenGL state locally to avoid redundant OpenGL
        calls.
      </s:paragraph>
    </s:subsection>
  </s:section>

  <s:section>
    <s:section-title>Requirements</s:section-title>
    <s:paragraph>
      The Maven POM files are the canonical source for the project's
      dependencies:
    </s:paragraph>
    <s:formal-item s:kind="listings">
      <s:formal-item-title>POM files</s:formal-item-title>
      <s:list-unordered>
        <s:list-item><s:link-external s:target="./io7m-jcanephora-core-0.50.0.pom">io7m-jcanephora-core-0.50.0.pom</s:link-external></s:list-item>
        <s:list-item><s:link-external s:target="./io7m-jcanephora-jogl-0.50.0.pom">io7m-jcanephora-jogl-0.50.0.pom</s:link-external></s:list-item>
      </s:list-unordered>
    </s:formal-item>
    <s:paragraph>
      Beyond the dependencies given in the POM files, the
      <s:term s:type="package">jcanephora</s:term> package requires a
      a GPU supporting OpenGL 3.3.
    </s:paragraph>
  </s:section>

  <s:section>
    <s:section-title>Installation</s:section-title>
    <s:subsection>
      <s:subsection-title>Source compilation</s:subsection-title>
      <s:paragraph>
        The project can be compiled and installed with
        <s:link-external s:target="http://maven.apache.org">
          Maven</s:link-external>:
      </s:paragraph>
      <s:paragraph>
        <s:verbatim s:type="example"><![CDATA[$ mvn -C clean install]]></s:verbatim>
      </s:paragraph>
    </s:subsection>

    <s:subsection>
      <s:subsection-title>Maven</s:subsection-title>
      <s:paragraph>
        Regular releases are made to the
        <s:link-external
          s:target="http://search.maven.org/#search%7Cga%7C1%7Cio7m-jcanephora">
          Central Repository</s:link-external>,
        so it's possible to use the
        <s:term s:type="package">io7m-jcanephora</s:term>
        package in your projects by simply adding some dependencies to
        your Maven project.
      </s:paragraph>

      <s:paragraph>
        The package is split into multiple sub-packages. The
        <s:term s:type="package">jcanephora-core</s:term> package provides
        the types, interfaces, and implementations comprising the core of
        <s:term s:type="package">jcanephora</s:term>. This package is
        required to use <s:term s:type="package">jcanephora</s:term>.
      </s:paragraph>
      <s:paragraph>
        <s:verbatim s:type="example"><![CDATA[<dependency>
  <groupId>com.io7m.jcanephora</groupId>
  <artifactId>io7m-jcanephora-core</artifactId>
  <version>0.50.0</version>
</dependency>]]></s:verbatim>
      </s:paragraph>

      <s:paragraph>
        To use the <s:link-external s:target="http://jogamp.org">JOGL</s:link-external>
        backend for <s:term s:type="package">jcanephora</s:term>, include the
        <s:term s:type="package">jcanephora-jogl</s:term> package:
      </s:paragraph>
      <s:paragraph>
        <s:verbatim s:type="example"><![CDATA[<dependency>
  <groupId>com.io7m.jcanephora</groupId>
  <artifactId>io7m-jcanephora-jogl</artifactId>
  <version>0.50.0</version>
</dependency>]]></s:verbatim>
      </s:paragraph>

      <s:paragraph>
        All
        <s:link-external s:target="http://io7m.com">io7m.com</s:link-external>
        packages use Semantic Versioning
        <s:footnote>
          <s:link-external s:target="http://semver.org">http://semver.org
          </s:link-external>
        </s:footnote>
        , which implies that it is always safe to use version ranges
        with an exclusive upper bound equal to the next major version - the
        API of
        the package will not change in a backwards-incompatible manner before
        the
        next major version.
      </s:paragraph>
    </s:subsection>
  </s:section>

  <s:section>
    <s:section-title>Platform Specific Issues</s:section-title>
    <s:paragraph>
      There are currently no known platform-specific issues.
    </s:paragraph>
  </s:section>

  <s:section>
    <s:section-title>License</s:section-title>
    <s:paragraph>
      All files distributed with the
      <s:term s:type="package">io7m-jcanephora</s:term>
      package are placed under the following license:
      <s:verbatim s:type="license"><![CDATA[Copyright © 2015 <code@io7m.com> http://io7m.com

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.]]>
      </s:verbatim>
    </s:paragraph>
  </s:section>
</s:part>
