<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright Â© 2012 http://io7m.com

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  -->

<s:document
  xmlns:s="http://www.io7m.com/schemas/structural/0.1.0"
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <s:document-title>io7m-jcanephora 1.0.0 Documentation</s:document-title>
  <s:document-style>documentation.css</s:document-style>
  <s:document-contents/>

  <s:part>
    <s:part-title>Package Information</s:part-title>
    <s:part-contents />
    <s:section>
      <s:section-title>Orientation</s:section-title>
      <s:subsection>
        <s:subsection-title>Overview</s:subsection-title>
        <s:paragraph>
          The <s:term type="package">jcanephora</s:term>
          package implements a set of abstractions over
          <s:link-external target="http://opengl.org">OpenGL</s:link-external>
          with the intention of providing an API that enforces program
          correctness statically. The OpenGL API is extremely error prone, but
          thankfully most of the problems can be alleviated with the simple
          application of static types. Where the Java type system is too weak
          to give static guarantees, dynamic checks are used to prevent silent
          failure.
        </s:paragraph>
      </s:subsection>
      <s:subsection>
        <s:subsection-title>Correctness</s:subsection-title>
        <s:paragraph>
          Most functions in OpenGL return integers (type <s:term type="type">int</s:term>).
          The <s:term type="function">glCreateShader()</s:term> function, for example,
          returns an <s:term type="type">int</s:term> regardless of whether the function
          is creating a fragment shader or a vertex shader. Obviously, returning a different
          type depending on whether a fragment shader or a vertex shader would require
          a dependent type system. As Java clearly does not have dependent types, the
          <s:term type="package">jcanephora</s:term> package
          provides a <s:term type="function">compileVertexShader()</s:term> function that
          returns a value of type <s:term type="type">VertexShader</s:term> and a
          <s:term type="function">compileFragmentShader()</s:term> function that returns
          a value of type <s:term type="type">FragmentShader</s:term>, eliminating any
          chance of confusing the two at compile-time. The package takes a similar
          approach to static safety throughout.
        </s:paragraph>
      </s:subsection>
      <s:subsection>
        <s:subsection-title>Convenience</s:subsection-title>
        <s:paragraph>
          The <s:term type="package">jcanephora</s:term> package also provides
          on-demand (re)compilation of GLSL shader programs via a simple
          <s:term type="type">Program</s:term> API. The package is able to load
          programs from inside archives via
          <s:link-external target="http://io7m.com/software/jvvfs">jvvfs</s:link-external>.
          The <s:term type="type">Program</s:term> API also implements a simple abstraction
          over shading program parameters (attributes, uniforms) that makes it possible
          to query the names and types of parameters at run-time.
        </s:paragraph>
        <s:paragraph>
          The package also provides functions to produce orthographic and perspective
          projection matrices, and an implementation of the ubiquitous
          <s:term type="function">lookAt()</s:term>
          function for producing a view matrix that looks at a given point in space from
          a given location.
        </s:paragraph>
      </s:subsection>
      <s:subsection>
        <s:subsection-title>Simplicity</s:subsection-title>
        <s:paragraph>
          The <s:term type="package">jcanephora</s:term> package attempts to
          provide abstractions that are as minimal as possible. It should be
          possible for any experienced OpenGL programmer to use the package
          without having to learn new concepts or fight a complicated class
          hierarchy. The idea is to provide static type safety in as simple
          a manner as possible.
        </s:paragraph>
      </s:subsection>
    </s:section>
    <s:section>
      <s:section-title>Installation</s:section-title>
      <s:subsection>
        <s:subsection-title>Installation Requirements</s:subsection-title>
        <s:paragraph>
          Iff compiling from source, the following jar files and directories
          must be placed in the directory <s:term type="file">ext</s:term> in
          the project root:
        </s:paragraph>
        <s:formal-item kind="dependency_table" type="dependencies">
          <s:formal-item-title>Compile-time dependencies</s:formal-item-title>
          <s:table>
            <s:table-summary>Compile-time dependencies</s:table-summary>
            <s:table-head>
              <s:table-column-name>Jar</s:table-column-name>
              <s:table-column-name>Source</s:table-column-name>
            </s:table-head>
            <s:table-body>
              <s:table-row>
                <s:table-cell><s:term type="file">lwjgl-2.8.3</s:term></s:table-cell>
                <s:table-cell><s:link-external target="http://lwjgl.org">lwjgl</s:link-external></s:table-cell>
              </s:table-row>
              <s:table-row>
                <s:table-cell><s:term type="file">annotations.jar</s:term></s:table-cell>
                <s:table-cell><s:link-external target="http://findbugs.sourceforge.net">findbugs</s:link-external></s:table-cell>
              </s:table-row>
              <s:table-row>
                <s:table-cell><s:term type="file">jsr305.jar</s:term></s:table-cell>
                <s:table-cell><s:link-external target="http://findbugs.sourceforge.net">findbugs</s:link-external></s:table-cell>
              </s:table-row>
              <s:table-row>
                <s:table-cell><s:term type="file">io7m-jvvfs-1.1.0.jar</s:term></s:table-cell>
                <s:table-cell><s:link-external target="http://io7m.com/software/jvvfs/index.xhtml">jvvfs</s:link-external></s:table-cell>
              </s:table-row>
              <s:table-row>
                <s:table-cell><s:term type="file">io7m-jaux-1.0.0.jar</s:term></s:table-cell>
                <s:table-cell><s:link-external target="http://io7m.com/software/jaux/index.xhtml">jaux</s:link-external></s:table-cell>
              </s:table-row>
              <s:table-row>
                <s:table-cell><s:term type="file">io7m-jlog-1.0.0.jar</s:term></s:table-cell>
                <s:table-cell><s:link-external target="http://io7m.com/software/jlog/index.xhtml">jlog</s:link-external></s:table-cell>
              </s:table-row>
              <s:table-row>
                <s:table-cell><s:term type="file">io7m-jtensors-1.0.1.jar</s:term></s:table-cell>
                <s:table-cell><s:link-external target="http://io7m.com/software/jtensors/index.xhtml">jtensors</s:link-external></s:table-cell>
              </s:table-row>
              <s:table-row>
                <s:table-cell><s:term type="file">junit-4.10.jar</s:term></s:table-cell>
                <s:table-cell><s:link-external target="http://junit.org">junit</s:link-external></s:table-cell>
              </s:table-row>
            </s:table-body>
          </s:table>
        </s:formal-item>
        <s:paragraph>
          The <s:term type="file">lwjgl-2.8.3</s:term> directory is obtained by unpacking
          <s:term type="file">lwjgl-2.8.3.zip</s:term> from the official site into the
          <s:term type="file">ext</s:term> directory.
        </s:paragraph>
        <s:paragraph>
          The project can then be compiled using
          <s:link-external target="http://ant.apache.org">Ant</s:link-external>:
        </s:paragraph>
        <s:paragraph>
          <s:verbatim type="example"><![CDATA[$ ant]]></s:verbatim>     
        </s:paragraph>
      </s:subsection>
      <s:subsection>
        <s:subsection-title>Installation</s:subsection-title>
        <s:paragraph>
          Include <s:term type="file">io7m-jcanephora-1.0.0.jar</s:term>
          in your projects. The build process also produces a "source" jar
          file, <s:term type="file">io7m-jcanephora-source-1.0.0.jar</s:term>,
          that can be used for debugging in any IDE. The jar files do not
          contain any of the dependencies of the project, so these should
          be included separately.
        </s:paragraph>
      </s:subsection>
    </s:section>
    <s:section>
      <s:section-title>Supported Systems</s:section-title>
      <s:paragraph>
        The software is known to pass 100% of the included unit tests on the
        following platforms:
      </s:paragraph>
        <s:formal-item kind="platform_table" type="platforms">
          <s:formal-item-title>Supported systems</s:formal-item-title>
          <s:table>
            <s:table-summary>Supported systems</s:table-summary>
            <s:table-head>
              <s:table-column-name>OS</s:table-column-name>
              <s:table-column-name>OS-Version</s:table-column-name>
              <s:table-column-name>OS-Arch</s:table-column-name>
              <s:table-column-name>JDK-Vendor</s:table-column-name>
              <s:table-column-name>JDK-Version</s:table-column-name>
              <s:table-column-name>VM</s:table-column-name>
              <s:table-column-name>VM-Version</s:table-column-name>
            </s:table-head>
            <s:table-body>
              <s:table-row>
                <s:table-cell>Linux</s:table-cell>
                <s:table-cell>3.2.2-1-ARCH</s:table-cell>
                <s:table-cell>x86_64</s:table-cell>
                <s:table-cell>Sun Microsystems Inc.</s:table-cell>
                <s:table-cell>1.6.0_22</s:table-cell>
                <s:table-cell>OpenJDK 64-Bit Server VM</s:table-cell>
                <s:table-cell>19.0-b09</s:table-cell>
              </s:table-row>
              <s:table-row>
                <s:table-cell>Linux</s:table-cell>
                <s:table-cell>3.2.9-1-ARCH</s:table-cell>
                <s:table-cell>x86_64</s:table-cell>
                <s:table-cell>Sun Microsystems Inc.</s:table-cell>
                <s:table-cell>1.6.0_24</s:table-cell>
                <s:table-cell>OpenJDK 64-Bit Server VM</s:table-cell>
                <s:table-cell>20.0-b12</s:table-cell>
              </s:table-row>
              <s:table-row>
                <s:table-cell>Windows XP</s:table-cell>
                <s:table-cell>5.1</s:table-cell>
                <s:table-cell>x86</s:table-cell>
                <s:table-cell>Oracle Corporation</s:table-cell>
                <s:table-cell>1.7.0_02</s:table-cell>
                <s:table-cell>Java Hotspot(TM) Client VM</s:table-cell>
                <s:table-cell>22.0-b10</s:table-cell>
              </s:table-row>
              <s:table-row>
                <s:table-cell>Mac OS X</s:table-cell>
                <s:table-cell>10.6.8</s:table-cell>
                <s:table-cell>x86_64</s:table-cell>
                <s:table-cell>Apple Inc.</s:table-cell>
                <s:table-cell>1.6.0_29</s:table-cell>
                <s:table-cell>Java Hotspot(TM) 64-Bit Server VM</s:table-cell>
                <s:table-cell>20.4-b02-402</s:table-cell>
              </s:table-row>
              <s:table-row>
                <s:table-cell>SunOS</s:table-cell>
                <s:table-cell>5.11</s:table-cell>
                <s:table-cell>x86</s:table-cell>
                <s:table-cell>Sun Microsystems Inc.</s:table-cell>
                <s:table-cell>1.6.0_21</s:table-cell>
                <s:table-cell>Java Hotspot(TM) Client VM</s:table-cell>
                <s:table-cell>17.0-b16</s:table-cell>
              </s:table-row>
            </s:table-body>
          </s:table>
        </s:formal-item>
    </s:section>
    <s:section>
      <s:section-title>Platform Specific Issues</s:section-title>
      <s:paragraph>
        There are currently no known platform-specific issues.
      </s:paragraph>
    </s:section>
    <s:section>
      <s:section-title>License</s:section-title>
      <s:paragraph>
        All files distributed with the <s:term type="package">jcanephora</s:term>
        package are placed under the following license:
        <s:verbatim type="license"><![CDATA[Copyright Â© 2012 http://io7m.com

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.]]>
        </s:verbatim>
      </s:paragraph>
    </s:section>
  </s:part>

  <s:part>
    <s:part-title>jcanephora For C Programmers</s:part-title>
    <s:part-contents/>
    <s:section>
      <s:section-title>Overview</s:section-title>
      <s:paragraph>
        As stated repeatedly, the <s:term type="package">jcanephora</s:term>
        package strives for increased static and run-time type safety. This
        does, however, mean that there are new abstractions to learn. This
        section of the documentation attempts to describe how to use the API
        for those already familiar with OpenGL. It presents small programs
        written in C and then shows the <s:term type="package">jcanephora</s:term>
        equivalent.
      </s:paragraph>
    </s:section>
    <s:section>
      <s:section-title>Vertex Buffer Objects</s:section-title>
      <s:paragraph>
        The following C program
        [<s:link-external target="vbo.c">vbo.c</s:link-external>]
        demonstrates the creation of vertex buffer and index buffer objects
        in plain OpenGL. It creates buffers and then draws them to the screen
        using the fixed-function OpenGL pipeline.
      </s:paragraph>
      <s:formal-item kind="example">
        <s:formal-item-title>Vertex buffers (C)</s:formal-item-title>
        <s:verbatim><xi:include href="vbo.c" parse="text"/></s:verbatim>
      </s:formal-item>
      <s:paragraph>
        Where the <s:link-external target="vbo.c">C version</s:link-external>
        creates essentially untyped memory, the <s:term type="package">jcanephora</s:term>
        version requires programmers to use explicit type descriptors for
        buffers. In order to write to the map, the programmer has to obtain
        access via typed cursors. Intuitively, if the array buffer is thought
        of as an array of records of a given type, the cursors can only point
        to specific fields in the records as they seek through the array. Note
        that in order to avoid introducing too much of the API at once and
        for direct comparison with the C version, the
        example code drops down to the fixed-function pipeline (via LWJGL)
        for rendering.
      </s:paragraph>
      <s:formal-item kind="example">
        <s:formal-item-title>Vertex buffers (Java)</s:formal-item-title>
        <s:verbatim><xi:include href="../src/com/io7m/jcanephora/examples/lwjgl30/VBOExample.java" parse="text"/></s:verbatim>
      </s:formal-item>
    </s:section>
    <s:section>
      <s:section-title>Textures</s:section-title>
      <s:paragraph>
        The following C program
        [<s:link-external target="texture-use.c">texture-usage.c</s:link-external>]
        demonstrates the creation and usage of textures. It loads a TIFF
        image using <s:link-external target="http://libtiff.org">libTIFF</s:link-external>,
        into a pixel buffer, copies the pixel buffer into a texture,
        binds the texture to the first texture unit, and displays it on a
        textured quad.
      </s:paragraph>
      <s:formal-item kind="example">
        <s:formal-item-title>Textures (C)</s:formal-item-title>
        <s:verbatim><xi:include href="texture-use.c" parse="text"/></s:verbatim>
      </s:formal-item>
      <s:paragraph>
        The <s:term type="package">jcanephora</s:term> version reads an RGBA
        texture directly from a file. The image is converted to RGBA regardless
        of the format of the image. The <s:term type="package">jcanephora</s:term>
        package requires the programmer to retrieve a list of the available
        texture units and then explicitly bind textures to the texture units
        for use. This eliminates an ugly class of bugs involving the programmer
        using more texture units than the implementation provides and then
        failing to check <s:term type="function">glGetError()</s:term> (the
        bug may go completely unnoticed: who will notice that one texture out
        of thirty applied to an object is missing?).
      </s:paragraph>
      <s:paragraph>
        Note that textures are always backed by pixel buffers in
        <s:term type="package">jcanephora</s:term> and may therefore be
        mapped and then modified using typed cursors for trivial "streaming"
        textures.
      </s:paragraph>
      <s:formal-item kind="example">
        <s:formal-item-title>Textures (Java)</s:formal-item-title>
<s:verbatim><xi:include href="../src/com/io7m/jcanephora/examples/lwjgl30/TextureExampleSimple.java" parse="text"/></s:verbatim>
      </s:formal-item>
    </s:section>
    <s:section>
      <s:section-title>DrawElements</s:section-title>
      <s:formal-item kind="example">
        <s:formal-item-title>DrawElements (C)</s:formal-item-title>
        <s:verbatim><![CDATA[

]]></s:verbatim>
      </s:formal-item>
      <s:paragraph>
        Where the <s:link-external target="draw.c">C version</s:link-external>...
      </s:paragraph>
      <s:formal-item kind="example">
        <s:formal-item-title>DrawElements (Java)</s:formal-item-title>
        <s:verbatim><![CDATA[

]]></s:verbatim>
      </s:formal-item>
    </s:section>
  </s:part>

  <s:part>
    <s:part-title>API Reference</s:part-title>
    <s:part-contents/>
    <s:section>
      <s:section-title>Javadoc</s:section-title>
      <s:paragraph>
        API documentation for the package is provided via the
        included <s:link-external target="javadoc">Javadoc</s:link-external>.
      </s:paragraph>
    </s:section>
  </s:part>

</s:document>
